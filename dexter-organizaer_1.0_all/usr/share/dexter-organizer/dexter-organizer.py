#!/usr/bin/env python3
"""
Dexter-Organizer - Aplicaci√≥n para organizaci√≥n de documentos
Versi√≥n 1.0
"""

import os
import sys
import shutil
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from tkinter.scrolledtext import ScrolledText
import json
import datetime
import subprocess
from pathlib import Path

class DexterConfig:
    """M√≥dulo para manejar configuraciones y respaldos de la aplicaci√≥n"""
    
    def __init__(self, app):
        self.app = app
        self.config_dir = os.path.join(os.path.expanduser("~"), ".config", "dexter-organizer")
        os.makedirs(self.config_dir, exist_ok=True)
        self.config_file = os.path.join(self.config_dir, "config.json")
        self.load_config()
    
    def load_config(self):
        """Cargar configuraci√≥n desde archivo"""
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    self.config = json.load(f)
            except Exception as e:
                self.config = {"theme": "light", "categories": [], "documents": {}}
                messagebox.showerror("Error", f"Error al cargar configuraci√≥n: {str(e)}")
        else:
            self.config = {"theme": "light", "categories": [], "documents": {}}
    
    def save_config(self):
        """Guardar configuraci√≥n actual"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=4)
        except Exception as e:
            messagebox.showerror("Error", f"Error al guardar configuraci√≥n: {str(e)}")
    
    def backup(self):
        """Crear respaldo de toda la aplicaci√≥n"""
        try:
            backup_dir = filedialog.askdirectory(title="Seleccionar carpeta para guardar el respaldo")
            if not backup_dir:
                return
            
            timestamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
            backup_file = os.path.join(backup_dir, f"dexter-organizer-backup-{timestamp}.zip")
            
            # Crear un archivo zip con la configuraci√≥n y referencias a documentos
            shutil.make_archive(
                backup_file.replace('.zip', ''),
                'zip',
                self.config_dir
            )
            
            messagebox.showinfo("Respaldo", f"Respaldo creado exitosamente en:\n{backup_file}")
        except Exception as e:
            messagebox.showerror("Error", f"Error al crear respaldo: {str(e)}")
    
    def restore_backup(self):
        """Restaurar desde un respaldo"""
        try:
            backup_file = filedialog.askopenfilename(
                title="Seleccionar archivo de respaldo",
                filetypes=[("Archivos ZIP", "*.zip")]
            )
            if not backup_file:
                return
            
            # Extraer respaldo
            import tempfile
            with tempfile.TemporaryDirectory() as tmpdirname:
                shutil.unpack_archive(backup_file, tmpdirname, 'zip')
                
                # Restaurar configuraci√≥n
                config_file = os.path.join(tmpdirname, "config.json")
                if os.path.exists(config_file):
                    shutil.copy2(config_file, self.config_file)
                    self.load_config()
                    messagebox.showinfo("Restauraci√≥n", "Respaldo restaurado exitosamente")
                else:
                    messagebox.showerror("Error", "Archivo de respaldo inv√°lido")
        except Exception as e:
            messagebox.showerror("Error", f"Error al restaurar respaldo: {str(e)}")

class DexterOrganizer:
    """Aplicaci√≥n principal Dexter-Organizer"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("Dexter-Organizer")
        self.root.geometry("950x650")
        self.root.minsize(800, 600)
        
        # Inicializar configuraci√≥n
        self.config = DexterConfig(self)
        
        # Configurar tema
        self.apply_theme(self.config.config["theme"])
        
        # Crear interfaz
        self.create_ui()
        
        # Cargar categor√≠as
        self.load_categories()
    
    def apply_theme(self, theme):
        """Aplicar tema claro/oscuro cargando el archivo CSS correspondiente"""
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # Definir rutas de los archivos CSS
        css_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "assets")
        light_css = os.path.join(css_dir, "dexter_light.css")
        dark_css = os.path.join(css_dir, "dexter_dark.css")
        
        # Para sistemas instalados, verificar otra ubicaci√≥n posible
        if not os.path.exists(light_css):
            alt_css_dir = "/usr/share/dexter-organizer/assets"
            light_css = os.path.join(alt_css_dir, "dexter_light.css")
            dark_css = os.path.join(alt_css_dir, "dexter_dark.css")
        
        if theme == "dark":
            # Aplicar tema oscuro
            self.root.tk_setPalette(
                background='#2E2E2E',
                foreground='#FFFFFF',
                activeBackground='#4A4A4A',
                activeForeground='#FFFFFF'
            )
            self.style.configure("TFrame", background='#2E2E2E')
            self.style.configure("TButton", background='#4A4A4A', foreground='#FFFFFF')
            self.style.configure("TLabel", background='#2E2E2E', foreground='#FFFFFF')
            self.style.configure("Treeview", background='#3E3E3E', fieldbackground='#3E3E3E', foreground='#FFFFFF')
            
            # Intentar cargar el CSS oscuro si existe
            if os.path.exists(dark_css):
                try:
                    with open(dark_css, 'r') as f:
                        # Aqu√≠ podr√≠amos cargar el CSS si estuvi√©ramos usando un framework que lo soporte
                        # Como estamos usando tkinter, esto es solo referencia para futura implementaci√≥n
                        pass
                except Exception as e:
                    print(f"Error al cargar CSS oscuro: {str(e)}")
        else:
            # Aplicar tema claro
            self.root.tk_setPalette(
                background='#F0F0F0',
                foreground='#000000',
                activeBackground='#E0E0E0',
                activeForeground='#000000'
            )
            self.style.configure("TFrame", background='#F0F0F0')
            self.style.configure("TButton", background='#E0E0E0')
            self.style.configure("TLabel", background='#F0F0F0')
            self.style.configure("Treeview", background='#FFFFFF', fieldbackground='#FFFFFF')
            
            # Intentar cargar el CSS claro si existe
            if os.path.exists(light_css):
                try:
                    with open(light_css, 'r') as f:
                        # Aqu√≠ podr√≠amos cargar el CSS si estuvi√©ramos usando un framework que lo soporte
                        # Como estamos usando tkinter, esto es solo referencia para futura implementaci√≥n
                        pass
                except Exception as e:
                    print(f"Error al cargar CSS claro: {str(e)}")
    
    def toggle_theme(self):
        """Cambiar entre tema claro y oscuro"""
        current_theme = self.config.config["theme"]
        new_theme = "dark" if current_theme == "light" else "light"
        self.config.config["theme"] = new_theme
        self.config.save_config()
        self.apply_theme(new_theme)
    
    def create_ui(self):
        """Crear interfaz de usuario"""
        # Marco principal
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Header con botones
        self.header_frame = ttk.Frame(self.main_frame)
        self.header_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # Botones izquierdos
        self.btn_add = ttk.Button(self.header_frame, text="A√±adir", command=self.add_document)
        self.btn_add.pack(side=tk.LEFT, padx=2)
        
        self.btn_edit = ttk.Button(self.header_frame, text="Editar", command=self.edit_document)
        self.btn_edit.pack(side=tk.LEFT, padx=2)
        
        self.btn_delete = ttk.Button(self.header_frame, text="Eliminar", command=self.delete_document)
        self.btn_delete.pack(side=tk.LEFT, padx=2)
        
        # Botones derechos
        self.btn_theme = ttk.Button(self.header_frame, text="üåô" if self.config.config["theme"] == "light" else "‚òÄÔ∏è", 
                                  width=3, command=self.toggle_theme)
        self.btn_theme.pack(side=tk.RIGHT, padx=2)
        
        self.btn_settings = ttk.Button(self.header_frame, text="‚öôÔ∏è", width=3, command=self.show_settings)
        self.btn_settings.pack(side=tk.RIGHT, padx=2)
        
        # Panel de contenido
        self.content_frame = ttk.Frame(self.main_frame)
        self.content_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Panel izquierdo - Categor√≠as (140px)
        self.left_frame = ttk.Frame(self.content_frame, width=140)
        self.left_frame.pack(side=tk.LEFT, fill=tk.Y, padx=5, pady=5)
        self.left_frame.pack_propagate(False)
        
        # Etiqueta de categor√≠as
        self.lbl_categories = ttk.Label(self.left_frame, text="Categor√≠as")
        self.lbl_categories.pack(fill=tk.X, pady=(0, 5))
        
        # √Årbol de categor√≠as
        self.category_tree = ttk.Treeview(self.left_frame, show="tree")
        self.category_tree.pack(fill=tk.BOTH, expand=True)
        self.category_tree.bind("<<TreeviewSelect>>", self.category_selected)
        
        # Bot√≥n para a√±adir categor√≠a
        self.btn_add_category = ttk.Button(self.left_frame, text="+ Categor√≠a", command=self.add_category)
        self.btn_add_category.pack(fill=tk.X, pady=(5, 0))
        
        # Panel derecho - Documentos
        self.right_frame = ttk.Frame(self.content_frame)
        self.right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Etiqueta de documentos
        self.lbl_documents = ttk.Label(self.right_frame, text="Documentos")
        self.lbl_documents.pack(fill=tk.X, pady=(0, 5))
        
        # Lista de documentos
        self.doc_tree = ttk.Treeview(self.right_frame, columns=("name", "path", "type", "date"))
        self.doc_tree.heading("#0", text="")
        self.doc_tree.heading("name", text="Nombre")
        self.doc_tree.heading("path", text="Ubicaci√≥n")
        self.doc_tree.heading("type", text="Tipo")
        self.doc_tree.heading("date", text="Fecha")
        
        self.doc_tree.column("#0", width=0, stretch=tk.NO)
        self.doc_tree.column("name", width=200)
        self.doc_tree.column("path", width=300)
        self.doc_tree.column("type", width=100)
        self.doc_tree.column("date", width=150)
        
        self.doc_tree.pack(fill=tk.BOTH, expand=True)
        self.doc_tree.bind("<Double-1>", self.open_document)
    
    def load_categories(self):
        """Cargar categor√≠as desde la configuraci√≥n"""
        self.category_tree.delete(*self.category_tree.get_children())
        
        for category in self.config.config["categories"]:
            self.category_tree.insert("", "end", text=category, iid=category)
    
    def category_selected(self, event):
        """Actualizar documentos mostrados seg√∫n la categor√≠a seleccionada"""
        selection = self.category_tree.selection()
        if not selection:
            return
        
        category = selection[0]
        self.show_documents_for_category(category)
    
    def show_documents_for_category(self, category):
        """Mostrar documentos de una categor√≠a espec√≠fica"""
        self.doc_tree.delete(*self.doc_tree.get_children())
        
        if category not in self.config.config["documents"]:
            return
        
        for doc_id, doc_info in self.config.config["documents"][category].items():
            self.doc_tree.insert("", "end", iid=doc_id, values=(
                doc_info["name"],
                doc_info["path"],
                doc_info["type"],
                doc_info["date"]
            ))
    
    def add_category(self):
        """A√±adir nueva categor√≠a"""
        new_category = tk.simpledialog.askstring("Nueva Categor√≠a", "Nombre de la categor√≠a:")
        if not new_category:
            return
        
        if new_category in self.config.config["categories"]:
            messagebox.showwarning("Advertencia", "Esta categor√≠a ya existe")
            return
        
        self.config.config["categories"].append(new_category)
        self.config.config["documents"][new_category] = {}
        self.config.save_config()
        self.load_categories()
    
    def add_document(self):
        """A√±adir nuevo documento"""
        # Verificar si hay categor√≠as
        if not self.config.config["categories"]:
            messagebox.showwarning("Advertencia", "Debe crear al menos una categor√≠a primero")
            return
        
        # Preguntar la categor√≠a
        category_window = tk.Toplevel(self.root)
        category_window.title("Seleccionar Categor√≠a")
        category_window.geometry("300x150")
        category_window.transient(self.root)
        category_window.resizable(False, False)
        
        ttk.Label(category_window, text="Seleccione una categor√≠a:").pack(pady=10)
        
        category_var = tk.StringVar()
        category_combobox = ttk.Combobox(category_window, textvariable=category_var)
        category_combobox['values'] = self.config.config["categories"]
        category_combobox.pack(pady=5, padx=20, fill=tk.X)
        
        def on_ok():
            selected_category = category_var.get()
            if not selected_category:
                messagebox.showwarning("Advertencia", "Debe seleccionar una categor√≠a", parent=category_window)
                return
            
            category_window.destroy()
            self.continue_add_document(selected_category)
        
        def on_cancel():
            category_window.destroy()
        
        btn_frame = ttk.Frame(category_window)
        btn_frame.pack(pady=10, fill=tk.X)
        
        ttk.Button(btn_frame, text="OK", command=on_ok).pack(side=tk.RIGHT, padx=5)
        ttk.Button(btn_frame, text="Cancelar", command=on_cancel).pack(side=tk.RIGHT, padx=5)
        
        # Nueva categor√≠a
        def on_new_category():
            new_category = tk.simpledialog.askstring("Nueva Categor√≠a", "Nombre de la categor√≠a:", parent=category_window)
            if not new_category:
                return
            
            if new_category in self.config.config["categories"]:
                messagebox.showwarning("Advertencia", "Esta categor√≠a ya existe", parent=category_window)
                return
            
            self.config.config["categories"].append(new_category)
            self.config.config["documents"][new_category] = {}
            self.config.save_config()
            
            # Actualizar combobox
            category_combobox['values'] = self.config.config["categories"]
            category_var.set(new_category)
        
        ttk.Button(btn_frame, text="Nueva Categor√≠a", command=on_new_category).pack(side=tk.LEFT, padx=5)
        
        category_window.wait_window()
    
    def continue_add_document(self, category):
        """Continuar el proceso de a√±adir documento despu√©s de seleccionar categor√≠a"""
        # Preguntar tipo de documento
        options = [
            ("Crear nuevo documento", self.create_new_document),
            ("Cargar documento existente", self.load_existing_document)
        ]
        
        type_window = tk.Toplevel(self.root)
        type_window.title("Tipo de Documento")
        type_window.geometry("300x150")
        type_window.transient(self.root)
        type_window.resizable(False, False)
        
        ttk.Label(type_window, text="¬øQu√© desea hacer?").pack(pady=10)
        
        for text, command in options:
            btn = ttk.Button(type_window, text=text, command=lambda cmd=command: [type_window.destroy(), cmd(category)])
            btn.pack(pady=5, padx=20, fill=tk.X)
        
        ttk.Button(type_window, text="Cancelar", command=type_window.destroy).pack(pady=5, padx=20, fill=tk.X)
        
        type_window.wait_window()
    
    def create_new_document(self, category):
        """Crear un nuevo documento"""
        # Preguntar tipo de archivo
        file_types = [
            ("Texto", ".txt"),
            ("HTML", ".html"),
            ("Markdown", ".md"),
            ("Python", ".py"),
            ("Otro", "")
        ]
        
        type_window = tk.Toplevel(self.root)
        type_window.title("Tipo de Archivo")
        type_window.geometry("300x250")
        type_window.transient(self.root)
        type_window.resizable(False, False)
        
        ttk.Label(type_window, text="Seleccione el tipo de archivo:").pack(pady=10)
        
        file_type_var = tk.StringVar()
        
        for text, ext in file_types:
            radio = ttk.Radiobutton(type_window, text=text, value=ext, variable=file_type_var)
            radio.pack(anchor=tk.W, padx=20, pady=2)
        
        file_type_var.set(".txt")  # Valor predeterminado
        
        # Para "Otro" permitir especificar extensi√≥n
        custom_frame = ttk.Frame(type_window)
        custom_frame.pack(fill=tk.X, padx=20, pady=5)
        
        ttk.Label(custom_frame, text="Extensi√≥n personalizada:").pack(side=tk.LEFT)
        custom_ext = ttk.Entry(custom_frame, width=10, state="disabled")
        custom_ext.pack(side=tk.LEFT, padx=5)
        
        def toggle_custom_ext(*args):
            if file_type_var.get() == "":
                custom_ext.config(state="normal")
            else:
                custom_ext.config(state="disabled")
        
        file_type_var.trace("w", toggle_custom_ext)
        
        def on_ok():
            extension = file_type_var.get()
            if extension == "" and custom_ext.get():
                if not custom_ext.get().startswith("."):
                    extension = "." + custom_ext.get()
                else:
                    extension = custom_ext.get()
            
            type_window.destroy()
            
            # Preguntar nombre y ubicaci√≥n
            file_name = tk.simpledialog.askstring("Nombre de Archivo", "Nombre del archivo (sin extensi√≥n):")
            if not file_name:
                return
            
            # Preguntar d√≥nde guardar
            save_dir = filedialog.askdirectory(title="Seleccionar carpeta donde guardar el documento")
            if not save_dir:
                return
            
            full_path = os.path.join(save_dir, file_name + extension)
            
            # Crear archivo vac√≠o
            try:
                with open(full_path, 'w', encoding='utf-8') as f:
                    f.write("")
                
                # Registrar en configuraci√≥n
                doc_id = f"{category}_{file_name}_{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}"
                
                if category not in self.config.config["documents"]:
                    self.config.config["documents"][category] = {}
                
                self.config.config["documents"][category][doc_id] = {
                    "name": file_name + extension,
                    "path": full_path,
                    "type": extension[1:],
                    "date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
                
                self.config.save_config()
                
                # Mostrar en la interfaz
                self.show_documents_for_category(category)
                
                # Abrir para editar
                self.open_document_path(full_path)
                
            except Exception as e:
                messagebox.showerror("Error", f"Error al crear el archivo: {str(e)}")
        
        btn_frame = ttk.Frame(type_window)
        btn_frame.pack(pady=10, fill=tk.X)
        
        ttk.Button(btn_frame, text="OK", command=on_ok).pack(side=tk.RIGHT, padx=5)
        ttk.Button(btn_frame, text="Cancelar", command=type_window.destroy).pack(side=tk.RIGHT, padx=5)
        
        type_window.wait_window()
    
    def load_existing_document(self, category):
        """Cargar un documento existente"""
        file_path = filedialog.askopenfilename(
            title="Seleccionar documento",
            filetypes=[
                ("Todos los archivos", "*.*"),
                ("Texto", "*.txt"),
                ("HTML", "*.html"),
                ("Markdown", "*.md"),
                ("Python", "*.py")
            ]
        )
        
        if not file_path:
            return
        
        # Preguntar si desea hacer una copia o referenciar
        action = messagebox.askyesno(
            "A√±adir Documento",
            "¬øDesea hacer una copia en una nueva ubicaci√≥n?\n\n" +
            "S√≠: Crear copia en nueva ubicaci√≥n\n" +
            "No: Referenciar archivo original"
        )
        
        file_name = os.path.basename(file_path)
        file_ext = os.path.splitext(file_name)[1]
        
        if action:  # Crear copia
            save_dir = filedialog.askdirectory(title="Seleccionar carpeta donde guardar la copia")
            if not save_dir:
                return
            
            new_path = os.path.join(save_dir, file_name)
            try:
                shutil.copy2(file_path, new_path)
                file_path = new_path
            except Exception as e:
                messagebox.showerror("Error", f"Error al copiar el archivo: {str(e)}")
                return
        
        # Registrar en configuraci√≥n
        doc_id = f"{category}_{file_name}_{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}"
        
        if category not in self.config.config["documents"]:
            self.config.config["documents"][category] = {}
        
        self.config.config["documents"][category][doc_id] = {
            "name": file_name,
            "path": file_path,
            "type": file_ext[1:] if file_ext else "",
            "date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        self.config.save_config()
        
        # Mostrar en la interfaz
        self.show_documents_for_category(category)
    
    def edit_document(self):
        """Editar documento seleccionado"""
        selection = self.doc_tree.selection()
        if not selection:
            messagebox.showinfo("Informaci√≥n", "Seleccione un documento para editar")
            return
        
        doc_id = selection[0]
        
        # Encontrar categor√≠a y documento
        for category, docs in self.config.config["documents"].items():
            if doc_id in docs:
                file_path = docs[doc_id]["path"]
                self.open_document_path(file_path)
                break
    
    def delete_document(self):
        """Eliminar documento seleccionado"""
        selection = self.doc_tree.selection()
        if not selection:
            messagebox.showinfo("Informaci√≥n", "Seleccione un documento para eliminar")
            return
        
        doc_id = selection[0]
        
        # Preguntar confirmaci√≥n
        confirmation = messagebox.askyesno(
            "Confirmar eliminaci√≥n",
            "¬øDesea eliminar tambi√©n el archivo del disco?\n\n" +
            "S√≠: Eliminar archivo f√≠sico\n" +
            "No: Solo eliminar referencia"
        )
        
        # Encontrar categor√≠a y documento
        for category, docs in self.config.config["documents"].items():
            if doc_id in docs:
                if confirmation:
                    try:
                        os.remove(docs[doc_id]["path"])
                    except Exception as e:
                        messagebox.showerror("Error", f"No se pudo eliminar el archivo: {str(e)}")
                
                # Eliminar referencia
                del self.config.config["documents"][category][doc_id]
                self.config.save_config()
                self.show_documents_for_category(category)
                break
    
    def open_document(self, event):
        """Abrir documento seleccionado"""
        item = self.doc_tree.selection()[0]
        values = self.doc_tree.item(item, "values")
        file_path = values[1]  # La columna "path"
        
        self.open_document_path(file_path)
    
    def open_document_path(self, file_path):
        """Abrir documento por ruta"""
        if not os.path.exists(file_path):
            messagebox.showerror("Error", "El archivo no existe")
            return
        
        file_ext = os.path.splitext(file_path)[1].lower()
        
        # Para archivos HTML, permitir ver en modo web
        if file_ext == ".html":
            view_mode = messagebox.askyesno(
                "Abrir HTML",
                "¬øC√≥mo desea abrir el archivo HTML?\n\n" +
                "S√≠: Abrir en navegador web\n" +
                "No: Abrir en editor de texto"
            )
            
            if view_mode:
                # Abrir en navegador
                try:
                    import webbrowser
                    webbrowser.open(file_path)
                    return
                except Exception as e:
                    messagebox.showerror("Error", f"No se pudo abrir en navegador: {str(e)}")
        
        # Abrir en la aplicaci√≥n predeterminada
        try:
            if sys.platform == 'win32':
                os.startfile(file_path)
            elif sys.platform == 'darwin':  # macOS
                subprocess.call(['open', file_path])
            else:  # Linux
                subprocess.call(['xdg-open', file_path])
        except Exception as e:
            messagebox.showerror("Error", f"No se pudo abrir el archivo: {str(e)}")
    
    def show_settings(self):
        """Mostrar ventana de configuraci√≥n"""
        settings_window = tk.Toplevel(self.root)
        settings_window.title("Configuraci√≥n")
        settings_window.geometry("400x300")
        settings_window.transient(self.root)
        
        ttk.Label(settings_window, text="Configuraci√≥n", font=("Arial", 14)).pack(pady=10)
        
        # Opciones de tema
        theme_frame = ttk.Frame(settings_window)
        theme_frame.pack(fill=tk.X, padx=20, pady=5)
        
        ttk.Label(theme_frame, text="Tema:").pack(side=tk.LEFT)
        
        theme_var = tk.StringVar(value=self.config.config["theme"])
        theme_light = ttk.Radiobutton(theme_frame, text="Claro", value="light", variable=theme_var)
        theme_light.pack(side=tk.LEFT, padx=10)
        
        theme_dark = ttk.Radiobutton(theme_frame, text="Oscuro", value="dark", variable=theme_var)
        theme_dark.pack(side=tk.LEFT, padx=10)
        
        # Gesti√≥n de respaldos
        backup_frame = ttk.LabelFrame(settings_window, text="Respaldos")
        backup_frame.pack(fill=tk.X, padx=20, pady=10)
        
        ttk.Button(backup_frame, text="Crear respaldo", command=self.config.backup).pack(padx=10, pady=5, fill=tk.X)
        ttk.Button(backup_frame, text="Restaurar respaldo", command=self.config.restore_backup).pack(padx=10, pady=5, fill=tk.X)
        
        # Botones de acci√≥n
        btn_frame = ttk.Frame(settings_window)
        btn_frame.pack(side=tk.BOTTOM, fill=tk.X, padx=20, pady=10)
        
        def on_save():
            self.config.config["theme"] = theme_var.get()
            self.config.save_config()
            self.apply_theme(theme_var.get())
            settings_window.destroy()
        
        ttk.Button(btn_frame, text="Guardar", command=on_save).pack(side=tk.RIGHT, padx=5)
        ttk.Button(btn_frame, text="Cancelar", command=settings_window.destroy).pack(side=tk.RIGHT, padx=5)

def main():
    root = tk.Tk()
    app = DexterOrganizer(root)
    root.mainloop()

if __name__ == "__main__":
    main()
